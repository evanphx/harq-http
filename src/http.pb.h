// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#ifndef PROTOBUF_http_2eproto__INCLUDED
#define PROTOBUF_http_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace http {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_http_2eproto();
void protobuf_AssignDesc_http_2eproto();
void protobuf_ShutdownFile_http_2eproto();

class Header;
class Request;

enum Header_Key {
  Header_Key_HOST = 0,
  Header_Key_ACCEPT = 1,
  Header_Key_USER_AGENT = 2
};
bool Header_Key_IsValid(int value);
const Header_Key Header_Key_Key_MIN = Header_Key_HOST;
const Header_Key Header_Key_Key_MAX = Header_Key_USER_AGENT;
const int Header_Key_Key_ARRAYSIZE = Header_Key_Key_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Key_descriptor();
inline const ::std::string& Header_Key_Name(Header_Key value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Key_descriptor(), value);
}
inline bool Header_Key_Parse(
    const ::std::string& name, Header_Key* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Key>(
    Header_Key_descriptor(), name, value);
}
enum Request_Method {
  Request_Method_DELETE = 0,
  Request_Method_GET = 1,
  Request_Method_HEAD = 2,
  Request_Method_POST = 3,
  Request_Method_PUT = 4
};
bool Request_Method_IsValid(int value);
const Request_Method Request_Method_Method_MIN = Request_Method_DELETE;
const Request_Method Request_Method_Method_MAX = Request_Method_PUT;
const int Request_Method_Method_ARRAYSIZE = Request_Method_Method_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Method_descriptor();
inline const ::std::string& Request_Method_Name(Request_Method value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Method_descriptor(), value);
}
inline bool Request_Method_Parse(
    const ::std::string& name, Request_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Method>(
    Request_Method_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Header_Key Key;
  static const Key HOST = Header_Key_HOST;
  static const Key ACCEPT = Header_Key_ACCEPT;
  static const Key USER_AGENT = Header_Key_USER_AGENT;
  static inline bool Key_IsValid(int value) {
    return Header_Key_IsValid(value);
  }
  static const Key Key_MIN =
    Header_Key_Key_MIN;
  static const Key Key_MAX =
    Header_Key_Key_MAX;
  static const int Key_ARRAYSIZE =
    Header_Key_Key_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Key_descriptor() {
    return Header_Key_descriptor();
  }
  static inline const ::std::string& Key_Name(Key value) {
    return Header_Key_Name(value);
  }
  static inline bool Key_Parse(const ::std::string& name,
      Key* value) {
    return Header_Key_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 standard_key = 1;
  inline bool has_standard_key() const;
  inline void clear_standard_key();
  static const int kStandardKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 standard_key() const;
  inline void set_standard_key(::google::protobuf::uint32 value);

  // optional .http.Header.Key key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::http::Header_Key key() const;
  inline void set_key(::http::Header_Key value);

  // optional string custom_key = 3;
  inline bool has_custom_key() const;
  inline void clear_custom_key();
  static const int kCustomKeyFieldNumber = 3;
  inline const ::std::string& custom_key() const;
  inline void set_custom_key(const ::std::string& value);
  inline void set_custom_key(const char* value);
  inline void set_custom_key(const char* value, size_t size);
  inline ::std::string* mutable_custom_key();
  inline ::std::string* release_custom_key();
  inline void set_allocated_custom_key(::std::string* custom_key);

  // required string value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:http.Header)
 private:
  inline void set_has_standard_key();
  inline void clear_has_standard_key();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_custom_key();
  inline void clear_has_custom_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 standard_key_;
  int key_;
  ::std::string* custom_key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Method Method;
  static const Method DELETE = Request_Method_DELETE;
  static const Method GET = Request_Method_GET;
  static const Method HEAD = Request_Method_HEAD;
  static const Method POST = Request_Method_POST;
  static const Method PUT = Request_Method_PUT;
  static inline bool Method_IsValid(int value) {
    return Request_Method_IsValid(value);
  }
  static const Method Method_MIN =
    Request_Method_Method_MIN;
  static const Method Method_MAX =
    Request_Method_Method_MAX;
  static const int Method_ARRAYSIZE =
    Request_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Method_descriptor() {
    return Request_Method_descriptor();
  }
  static inline const ::std::string& Method_Name(Method value) {
    return Request_Method_Name(value);
  }
  static inline bool Method_Parse(const ::std::string& name,
      Method* value) {
    return Request_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 version_major = 1;
  inline bool has_version_major() const;
  inline void clear_version_major();
  static const int kVersionMajorFieldNumber = 1;
  inline ::google::protobuf::uint32 version_major() const;
  inline void set_version_major(::google::protobuf::uint32 value);

  // required uint32 version_minor = 2;
  inline bool has_version_minor() const;
  inline void clear_version_minor();
  static const int kVersionMinorFieldNumber = 2;
  inline ::google::protobuf::uint32 version_minor() const;
  inline void set_version_minor(::google::protobuf::uint32 value);

  // optional .http.Request.Method method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline ::http::Request_Method method() const;
  inline void set_method(::http::Request_Method value);

  // optional string custom_method = 4;
  inline bool has_custom_method() const;
  inline void clear_custom_method();
  static const int kCustomMethodFieldNumber = 4;
  inline const ::std::string& custom_method() const;
  inline void set_custom_method(const ::std::string& value);
  inline void set_custom_method(const char* value);
  inline void set_custom_method(const char* value, size_t size);
  inline ::std::string* mutable_custom_method();
  inline ::std::string* release_custom_method();
  inline void set_allocated_custom_method(::std::string* custom_method);

  // required string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // repeated .http.Header headers = 6;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 6;
  inline const ::http::Header& headers(int index) const;
  inline ::http::Header* mutable_headers(int index);
  inline ::http::Header* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::http::Header >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::http::Header >*
      mutable_headers();

  // optional bytes body = 7;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:http.Request)
 private:
  inline void set_has_version_major();
  inline void clear_has_version_major();
  inline void set_has_version_minor();
  inline void clear_has_version_minor();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_custom_method();
  inline void clear_has_custom_method();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 version_major_;
  ::google::protobuf::uint32 version_minor_;
  ::std::string* custom_method_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::http::Header > headers_;
  ::std::string* body_;
  int method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_http_2eproto();
  friend void protobuf_AssignDesc_http_2eproto();
  friend void protobuf_ShutdownFile_http_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// optional uint32 standard_key = 1;
inline bool Header::has_standard_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_standard_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_standard_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_standard_key() {
  standard_key_ = 0u;
  clear_has_standard_key();
}
inline ::google::protobuf::uint32 Header::standard_key() const {
  return standard_key_;
}
inline void Header::set_standard_key(::google::protobuf::uint32 value) {
  set_has_standard_key();
  standard_key_ = value;
}

// optional .http.Header.Key key = 2;
inline bool Header::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::http::Header_Key Header::key() const {
  return static_cast< ::http::Header_Key >(key_);
}
inline void Header::set_key(::http::Header_Key value) {
  assert(::http::Header_Key_IsValid(value));
  set_has_key();
  key_ = value;
}

// optional string custom_key = 3;
inline bool Header::has_custom_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_custom_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_custom_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_custom_key() {
  if (custom_key_ != &::google::protobuf::internal::kEmptyString) {
    custom_key_->clear();
  }
  clear_has_custom_key();
}
inline const ::std::string& Header::custom_key() const {
  return *custom_key_;
}
inline void Header::set_custom_key(const ::std::string& value) {
  set_has_custom_key();
  if (custom_key_ == &::google::protobuf::internal::kEmptyString) {
    custom_key_ = new ::std::string;
  }
  custom_key_->assign(value);
}
inline void Header::set_custom_key(const char* value) {
  set_has_custom_key();
  if (custom_key_ == &::google::protobuf::internal::kEmptyString) {
    custom_key_ = new ::std::string;
  }
  custom_key_->assign(value);
}
inline void Header::set_custom_key(const char* value, size_t size) {
  set_has_custom_key();
  if (custom_key_ == &::google::protobuf::internal::kEmptyString) {
    custom_key_ = new ::std::string;
  }
  custom_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_custom_key() {
  set_has_custom_key();
  if (custom_key_ == &::google::protobuf::internal::kEmptyString) {
    custom_key_ = new ::std::string;
  }
  return custom_key_;
}
inline ::std::string* Header::release_custom_key() {
  clear_has_custom_key();
  if (custom_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_key_;
    custom_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Header::set_allocated_custom_key(::std::string* custom_key) {
  if (custom_key_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_key_;
  }
  if (custom_key) {
    set_has_custom_key();
    custom_key_ = custom_key;
  } else {
    clear_has_custom_key();
    custom_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 4;
inline bool Header::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Header::value() const {
  return *value_;
}
inline void Header::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Header::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Header::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Header::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Header::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// required uint32 version_major = 1;
inline bool Request::has_version_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_version_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_version_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_version_major() {
  version_major_ = 0u;
  clear_has_version_major();
}
inline ::google::protobuf::uint32 Request::version_major() const {
  return version_major_;
}
inline void Request::set_version_major(::google::protobuf::uint32 value) {
  set_has_version_major();
  version_major_ = value;
}

// required uint32 version_minor = 2;
inline bool Request::has_version_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_version_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_version_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_version_minor() {
  version_minor_ = 0u;
  clear_has_version_minor();
}
inline ::google::protobuf::uint32 Request::version_minor() const {
  return version_minor_;
}
inline void Request::set_version_minor(::google::protobuf::uint32 value) {
  set_has_version_minor();
  version_minor_ = value;
}

// optional .http.Request.Method method = 3;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::http::Request_Method Request::method() const {
  return static_cast< ::http::Request_Method >(method_);
}
inline void Request::set_method(::http::Request_Method value) {
  assert(::http::Request_Method_IsValid(value));
  set_has_method();
  method_ = value;
}

// optional string custom_method = 4;
inline bool Request::has_custom_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_custom_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_custom_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_custom_method() {
  if (custom_method_ != &::google::protobuf::internal::kEmptyString) {
    custom_method_->clear();
  }
  clear_has_custom_method();
}
inline const ::std::string& Request::custom_method() const {
  return *custom_method_;
}
inline void Request::set_custom_method(const ::std::string& value) {
  set_has_custom_method();
  if (custom_method_ == &::google::protobuf::internal::kEmptyString) {
    custom_method_ = new ::std::string;
  }
  custom_method_->assign(value);
}
inline void Request::set_custom_method(const char* value) {
  set_has_custom_method();
  if (custom_method_ == &::google::protobuf::internal::kEmptyString) {
    custom_method_ = new ::std::string;
  }
  custom_method_->assign(value);
}
inline void Request::set_custom_method(const char* value, size_t size) {
  set_has_custom_method();
  if (custom_method_ == &::google::protobuf::internal::kEmptyString) {
    custom_method_ = new ::std::string;
  }
  custom_method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_custom_method() {
  set_has_custom_method();
  if (custom_method_ == &::google::protobuf::internal::kEmptyString) {
    custom_method_ = new ::std::string;
  }
  return custom_method_;
}
inline ::std::string* Request::release_custom_method() {
  clear_has_custom_method();
  if (custom_method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_method_;
    custom_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_custom_method(::std::string* custom_method) {
  if (custom_method_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_method_;
  }
  if (custom_method) {
    set_has_custom_method();
    custom_method_ = custom_method;
  } else {
    clear_has_custom_method();
    custom_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string url = 5;
inline bool Request::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Request::url() const {
  return *url_;
}
inline void Request::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Request::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Request::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Request::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .http.Header headers = 6;
inline int Request::headers_size() const {
  return headers_.size();
}
inline void Request::clear_headers() {
  headers_.Clear();
}
inline const ::http::Header& Request::headers(int index) const {
  return headers_.Get(index);
}
inline ::http::Header* Request::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::http::Header* Request::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::http::Header >&
Request::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::http::Header >*
Request::mutable_headers() {
  return &headers_;
}

// optional bytes body = 7;
inline bool Request::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& Request::body() const {
  return *body_;
}
inline void Request::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Request::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Request::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* Request::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace http

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::http::Header_Key>() {
  return ::http::Header_Key_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::http::Request_Method>() {
  return ::http::Request_Method_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_http_2eproto__INCLUDED
